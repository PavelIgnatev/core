const { google } = require('googleapis');
const fs = require('fs');
const path = require('path');
const { withRetry } = require('./retry-utils.js');

const AUTH_DIR = './auth';
const CREDENTIALS_PATH = path.join(AUTH_DIR, 'credentials.json');
const TOKEN_PATH = path.join(AUTH_DIR, 'token.json');

async function initializeAuth() {
  try {
    if (!fs.existsSync(CREDENTIALS_PATH)) {
      console.log('‚ùå –§–∞–π–ª auth/credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }

    const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH));
    const { client_secret, client_id } = credentials.installed;
    const auth = new google.auth.OAuth2(client_id, client_secret);

    if (!fs.existsSync(TOKEN_PATH)) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ auth/token.json');
      return { auth, needsAuth: true };
    }

    const token = JSON.parse(fs.readFileSync(TOKEN_PATH));
    auth.setCredentials(token);
    await refreshTokenAndSave(auth);

    return { auth, needsAuth: false };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
    return null;
  }
}

async function refreshTokenAndSave(auth) {
  try {
    const currentToken = JSON.parse(fs.readFileSync(TOKEN_PATH));
    const { credentials: newCredentials } = await auth.refreshAccessToken();

    const tokenToSave = {
      access_token: newCredentials.access_token,
      refresh_token: newCredentials.refresh_token || currentToken.refresh_token,
    };

    fs.writeFileSync(TOKEN_PATH, JSON.stringify(tokenToSave, null, 2));
    auth.setCredentials(newCredentials);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message);
    if (error.message.includes('invalid_grant')) {
      throw error;
    }
  }
}

async function createSpreadsheet(auth, title) {
  const sheets = google.sheets({ version: 'v4', auth });
  const maxRetries = 30;
  let retryCount = 0;
  
  while (retryCount < maxRetries) {
    try {
  const response = await sheets.spreadsheets.create({
    requestBody: { properties: { title } },
  });
  return response.data.spreadsheetId;
    } catch (error) {
      if (retryCount < maxRetries - 1) {
        retryCount++;
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API: ${error.message}, –æ–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥... (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries})`);
        await new Promise(resolve => setTimeout(resolve, 5000));
      } else {
        throw error;
      }
    }
  }
}

async function getTableData(auth, spreadsheetId, range = 'A:Z') {
  const sheets = google.sheets({ version: 'v4', auth });
  const maxRetries = 30;
  let retryCount = 0;
  
  while (retryCount < maxRetries) {
    try {
  const response = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range,
  });
  return response.data.values || [];
    } catch (error) {
      if (retryCount < maxRetries - 1) {
        retryCount++;
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API: ${error.message}, –æ–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥... (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries})`);
        await new Promise(resolve => setTimeout(resolve, 5000));
      } else {
        throw error;
      }
    }
  }
}

async function insertRowsAtPosition(auth, spreadsheetId, position, rows, sheetId = 0) {
  const sheets = google.sheets({ version: 'v4', auth });
  
  const maxRetries = 30;
  let retryCount = 0;
  
  while (retryCount < maxRetries) {
    try {
  await sheets.spreadsheets.batchUpdate({
    spreadsheetId,
    requestBody: {
      requests: [
        {
          insertDimension: {
            range: {
              sheetId: sheetId,
              dimension: 'ROWS',
              startIndex: position,
              endIndex: position + rows.length,
            },
            inheritFromBefore: false,
          },
        },
            {
              updateCells: {
                range: {
                  sheetId: sheetId,
                  startRowIndex: position,
                  endRowIndex: position + rows.length,
                  startColumnIndex: 0,
                  endColumnIndex: 9,
                },
                rows: rows.map(row => ({
                  values: row.map(cell => ({ userEnteredValue: { stringValue: cell.toString() } }))
                })),
                fields: 'userEnteredValue',
              },
            },
      ],
    },
  });

      return;
    } catch (error) {
      if (retryCount < maxRetries - 1) {
        retryCount++;
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API: ${error.message}, –æ–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥... (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries})`);
        await new Promise(resolve => setTimeout(resolve, 5000));
      } else {
        throw error;
      }
    }
  }
}

async function formatHeaders(auth, spreadsheetId, startPosition, headerCount, sheetId = 0) {
  const sheets = google.sheets({ version: 'v4', auth });
  const requests = [];
  
  for (let i = 0; i < headerCount; i++) {
    requests.push({
      mergeCells: {
        range: {
          sheetId: sheetId,
          startRowIndex: startPosition + i,
          endRowIndex: startPosition + i + 1,
          startColumnIndex: 0,
          endColumnIndex: 9,
        },
        mergeType: 'MERGE_ALL',
      },
    });
  }
  
  if (requests.length > 0) {
    const maxRetries = 30;
    let retryCount = 0;
    
    while (retryCount < maxRetries) {
      try {
        await sheets.spreadsheets.batchUpdate({
          spreadsheetId,
          requestBody: { requests },
        });
        return;
      } catch (error) {
        if (retryCount < maxRetries - 1) {
          retryCount++;
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API: ${error.message}, –æ–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥... (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries})`);
          await new Promise(resolve => setTimeout(resolve, 5000));
        } else {
          throw error;
        }
      }
    }
  }
}

async function makePublic(auth, spreadsheetId) {
  const drive = google.drive({ version: 'v3', auth });
  const maxRetries = 30;
  let retryCount = 0;
  
  while (retryCount < maxRetries) {
    try {
      await drive.permissions.create({
        fileId: spreadsheetId,
        requestBody: { role: 'reader', type: 'anyone' },
      });
      return;
    } catch (error) {
      if (retryCount < maxRetries - 1) {
        retryCount++;
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API: ${error.message}, –æ–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥... (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries})`);
        await new Promise(resolve => setTimeout(resolve, 5000));
      } else {
        throw error;
      }
    }
  }
}

function getSpreadsheetLink(spreadsheetId) {
  return `https://docs.google.com/spreadsheets/d/${spreadsheetId}/edit?usp=sharing`;
}

async function createClientTable(title) {
  try {
    const authResult = await initializeAuth();
    if (!authResult || authResult.needsAuth) {
      console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      return null;
    }

    const { auth } = authResult;
    const spreadsheetId = await createSpreadsheet(auth, title);
    await makePublic(auth, spreadsheetId);
    const link = getSpreadsheetLink(spreadsheetId);

    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: ${title}`);
    console.log(`üîó –°—Å—ã–ª–∫–∞: ${link}`);

    return { spreadsheetId, title, link };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    return null;
  }
}

async function getOrCreateMonthSheet(auth, spreadsheetId, year, month) {
  const sheets = google.sheets({ version: 'v4', auth });
  const monthName = getMonthName(month);
  const sheetTitle = `${monthName} ${year}`;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
    const response = await withRetry(async () => {
      return await sheets.spreadsheets.get({ spreadsheetId });
    });
    
    const existingSheets = response.data.sheets;
    const existingSheet = existingSheets.find(sheet => 
      sheet.properties.title === sheetTitle
    );
    
    if (existingSheet) {
      console.log(`‚úÖ –õ–∏—Å—Ç "${sheetTitle}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      return existingSheet.properties.sheetId;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç —É–∂–µ —ç—Ç–∏–º –º–µ—Å—è—Ü–µ–º
    const mainSheet = existingSheets.find(sheet => sheet.properties.index === 0);
    if (mainSheet && mainSheet.properties.title === sheetTitle) {
      console.log(`‚úÖ –ì–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "${sheetTitle}"`);
      return mainSheet.properties.sheetId;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏ 1 (–ø–æ—Å–ª–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞)
    console.log(`üÜï –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç "${sheetTitle}" –≤ –ø–æ–∑–∏—Ü–∏–∏ 1`);
    const createResponse = await withRetry(async () => {
      return await sheets.spreadsheets.batchUpdate({
        spreadsheetId,
        requestBody: {
          requests: [{
            addSheet: {
              properties: {
                title: sheetTitle,
                gridProperties: {
                  rowCount: 1000,
                  columnCount: 9
                },
                index: 1 // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
              }
            }
          }]
        }
      });
    });
    
    const newSheetId = createResponse.data.replies[0].addSheet.properties.sheetId;
    console.log(`‚úÖ –õ–∏—Å—Ç "${sheetTitle}" —Å–æ–∑–¥–∞–Ω —Å ID: ${newSheetId}`);
    
    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –õ–∏—Å—Ç1 –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await deleteEmptyMainSheet(auth, spreadsheetId);
    
    // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ –ª–∏—Å—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    await reorderSheetsByDate(auth, spreadsheetId);
    
    return newSheetId;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ "${sheetTitle}":`, error.message);
    throw error;
  }
}

async function reorderSheetsByDate(auth, spreadsheetId) {
  const sheets = google.sheets({ version: 'v4', auth });
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
    const response = await withRetry(async () => {
      return await sheets.spreadsheets.get({ spreadsheetId });
    });
    
    const allSheets = response.data.sheets;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Å—è—á–Ω—ã–µ –ª–∏—Å—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç)
    const monthSheets = allSheets.filter(sheet => {
      const title = sheet.properties.title;
      return sheet.properties.index !== 0 && /^[–ê-–Ø–∞-—è]+ \d{4}$/.test(title);
    });
    
    if (monthSheets.length <= 1) {
      return; // –ù–µ—á–µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    monthSheets.sort((a, b) => {
      const dateA = parseSheetDate(a.properties.title);
      const dateB = parseSheetDate(b.properties.title);
      return dateB - dateA; // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    });
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤
    const requests = [];
    let targetIndex = 1; // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
    
    for (const sheet of monthSheets) {
      if (sheet.properties.index !== targetIndex) {
              requests.push({
        updateSheetProperties: {
          properties: {
            sheetId: sheet.properties.sheetId,
            index: targetIndex
          },
          fields: 'index'
        }
      });
      }
      targetIndex++;
    }
    
    if (requests.length > 0) {
      console.log(`üîÑ –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º ${requests.length} –ª–∏—Å—Ç–æ–≤...`);
      await withRetry(async () => {
        return await sheets.spreadsheets.batchUpdate({
          spreadsheetId,
          requestBody: { requests }
        });
      });
      console.log('‚úÖ –õ–∏—Å—Ç—ã –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤:', error.message);
  }
}

function parseSheetDate(sheetTitle) {
  const monthMap = {
    '–Ø–Ω–≤–∞—Ä—å': 0, '–§–µ–≤—Ä–∞–ª—å': 1, '–ú–∞—Ä—Ç': 2, '–ê–ø—Ä–µ–ª—å': 3, '–ú–∞–π': 4, '–ò—é–Ω—å': 5,
    '–ò—é–ª—å': 6, '–ê–≤–≥—É—Å—Ç': 7, '–°–µ–Ω—Ç—è–±—Ä—å': 8, '–û–∫—Ç—è–±—Ä—å': 9, '–ù–æ—è–±—Ä—å': 10, '–î–µ–∫–∞–±—Ä—å': 11
  };
  
  const match = sheetTitle.match(/^([–ê-–Ø–∞-—è]+) (\d{4})$/);
  if (match) {
    const monthName = match[1];
    const year = parseInt(match[2]);
    const month = monthMap[monthName];
    if (month !== undefined) {
      return new Date(year, month, 1).getTime();
    }
  }
  return 0;
}

async function deleteEmptyMainSheet(auth, spreadsheetId) {
  const sheets = google.sheets({ version: 'v4', auth });
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
    const response = await withRetry(async () => {
      return await sheets.spreadsheets.get({ spreadsheetId });
    });
    
    const allSheets = response.data.sheets;
    
    // –ò—â–µ–º –≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç (–Ω—É–ª–µ–≤–æ–π –ª–∏—Å—Ç)
    const mainSheet = allSheets.find(sheet => sheet.properties.index === 0);
    
    if (mainSheet) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–æ–π –ª–∏ –æ–Ω
      const data = await getTableData(auth, spreadsheetId, `${mainSheet.properties.title}!A:Z`);
      const isEmpty = data.length === 0 || (data.length === 1 && (!data[0] || data[0].every(cell => !cell)));
      
      if (isEmpty) {
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç "${mainSheet.properties.title}"`);
        await withRetry(async () => {
          return await sheets.spreadsheets.batchUpdate({
            spreadsheetId,
            requestBody: {
              requests: [{
                deleteSheet: {
                  sheetId: mainSheet.properties.sheetId
                }
              }]
            }
          });
        });
        console.log(`‚úÖ –ü—É—Å—Ç–æ–π –≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç "${mainSheet.properties.title}" —É–¥–∞–ª–µ–Ω`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞:', error.message);
  }
}

function getDateComponents(date) {
  const dayFormatted = date.toLocaleDateString('ru-RU', {
    weekday: 'long',
    year: 'numeric', 
    month: 'long',
    day: 'numeric',
  }).toUpperCase();
  
  const yearFormatted = date.getFullYear().toString();
  
  const monthFormatted = date.toLocaleDateString('ru-RU', {
    month: 'long',
  }).toUpperCase();
  
  const weekFormatted = getWeekInMonth(date);
  
  return { dayFormatted, yearFormatted, monthFormatted, weekFormatted };
}

function getWeekInMonth(date) {
  const year = date.getFullYear();
  const month = date.getMonth();
  
  const monthStart = new Date(year, month, 1);
  const monthEnd = new Date(year, month + 1, 0);
  
  let start = new Date(date);
  let end = new Date(date);
  
  // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ –ø—Ä–æ—à–ª–æ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –º–µ—Å—è—Ü–µ)
  while (start.getDay() !== 1) {
    start.setDate(start.getDate() - 1);
  }
  
  // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ –±—É–¥—É—â–µ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ)
  while (end.getDay() !== 0) {
    end.setDate(end.getDate() + 1);
  }
  
  // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –≥—Ä–∞–Ω–∏—Ü –º–µ—Å—è—Ü–∞
  if (start < monthStart) {
    start = monthStart;
  }
  if (end > monthEnd) {
    end = monthEnd;
  }
  
  return `${start.toLocaleDateString('ru-RU')} - ${end.toLocaleDateString('ru-RU')}`;
}

function findYear(data, yearText) {
  for (let i = 0; i < data.length; i++) {
    if (data[i] && data[i][0] === yearText) {
      return i;
    }
  }
  return -1;
}

function findMonth(data, monthText, yearPosition) {
  for (let i = yearPosition + 1; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    const text = data[i][0];
    
    if (isYear(text)) break;
    
    if (text === monthText) return i;
  }
  return -1;
}

function findWeek(data, weekText, monthPosition) {
  for (let i = monthPosition + 1; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    const text = data[i][0];
    
    if (isMonth(text)) break;
    
    if (text === weekText) return i;
  }
  return -1;
}

function findDay(data, dayText, weekPosition) {
  for (let i = weekPosition + 1; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    const text = data[i][0];
    
    if (isMonth(text) || isWeek(text)) break;
    
    if (text === dayText) return i;
  }
  return -1;
}

function isYear(text) {
  return text && /^\d{4}$/.test(text);
}

function isMonth(text) {
  if (!text) return false;
  const months = ['–Ø–ù–í–ê–†–¨', '–§–ï–í–†–ê–õ–¨', '–ú–ê–†–¢', '–ê–ü–†–ï–õ–¨', '–ú–ê–ô', '–ò–Æ–ù–¨', '–ò–Æ–õ–¨', '–ê–í–ì–£–°–¢', '–°–ï–ù–¢–Ø–ë–†–¨', '–û–ö–¢–Ø–ë–†–¨', '–ù–û–Ø–ë–†–¨', '–î–ï–ö–ê–ë–†–¨'];
  return months.some(month => text === month) && 
         !text.includes('–ù–ï–î–ï–õ–Ø') && !text.includes('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö') && !text.includes('–í–¢–û–†–ù–ò–ö') && 
         !text.includes('–°–†–ï–î–ê') && !text.includes('–ß–ï–¢–í–ï–†–ì') && !text.includes('–ü–Ø–¢–ù–ò–¶–ê') && 
         !text.includes('–°–£–ë–ë–û–¢–ê') && !text.includes('–í–û–°–ö–†–ï–°–ï–ù–¨–ï');
}

function isWeek(text) {
  return text && /\d{1,2}\.\d{1,2}\.\d{4} - \d{1,2}\.\d{1,2}\.\d{4}/.test(text);
}

function isDay(text) {
  if (!text) return false;
  const days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï'];
  return days.some(day => text.includes(day));
}

function isLead(text) {
  return text && /^\d{1,2}:\d{2}$/.test(text);
}

function findYearInsertPosition(data, targetYear) {
  const targetYearNum = parseInt(targetYear);
  
  for (let i = 0; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    if (isYear(data[i][0])) {
      const currentYearNum = parseInt(data[i][0]);
      if (targetYearNum > currentYearNum) {
        return i;
      }
    }
  }
  return data.length;
}

function findMonthInsertPosition(data, targetMonth, yearPosition) {
  const targetDate = getMonthDate(targetMonth);
  
  for (let i = yearPosition + 1; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    const text = data[i][0];
    if (isYear(text)) return i;
    
    if (isMonth(text)) {
      const currentDate = getMonthDate(text);
      if (currentDate && targetDate && targetDate > currentDate) {
        return i;
      }
    }
  }
  return data.length;
}

function findWeekInsertPosition(data, targetWeek, monthPosition) {
  const targetDate = getWeekDate(targetWeek);
  
  for (let i = monthPosition + 1; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    const text = data[i][0];
    if (isMonth(text)) return i;
    
    if (isWeek(text)) {
      const currentDate = getWeekDate(text);
      if (currentDate && targetDate && targetDate > currentDate) {
        return i;
      }
    }
  }
  return data.length;
}

function findDayInsertPosition(data, targetDay, weekPosition) {
  const targetDate = getDayDate(targetDay);
  
  for (let i = weekPosition + 1; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    const text = data[i][0];
    if (isMonth(text) || isWeek(text)) return i;
    
    if (isDay(text)) {
      const currentDate = getDayDate(text);
      if (currentDate && targetDate && targetDate > currentDate) {
        return i;
      }
    }
  }
  return data.length;
}

function findLeadInsertPosition(data, targetTime, dayPosition) {
  const targetMinutes = timeToMinutes(targetTime);
  
  for (let i = dayPosition + 1; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    const text = data[i][0];
    if (isMonth(text) || isWeek(text) || isDay(text)) return i;
    
    if (isLead(text)) {
      const currentMinutes = timeToMinutes(text);
      if (targetMinutes < currentMinutes) return i;
    }
  }
  return data.length;
}

function getMonthDate(monthText) {
  const monthMap = {
    '–Ø–ù–í–ê–†–¨': 0, '–§–ï–í–†–ê–õ–¨': 1, '–ú–ê–†–¢': 2, '–ê–ü–†–ï–õ–¨': 3, '–ú–ê–ô': 4, '–ò–Æ–ù–¨': 5,
    '–ò–Æ–õ–¨': 6, '–ê–í–ì–£–°–¢': 7, '–°–ï–ù–¢–Ø–ë–†–¨': 8, '–û–ö–¢–Ø–ë–†–¨': 9, '–ù–û–Ø–ë–†–¨': 10, '–î–ï–ö–ê–ë–†–¨': 11
  };
  
  return monthMap[monthText] !== undefined ? new Date(new Date().getFullYear(), monthMap[monthText], 1) : null;
}

function getWeekDate(weekText) {
  const match = weekText.match(/(\d{1,2})\.(\d{1,2})\.(\d{4})/);
  if (match) {
    return new Date(parseInt(match[3]), parseInt(match[2]) - 1, parseInt(match[1]));
  }
  return null;
}

function getDayDate(dayText) {
  const monthMap = {
    '–Ø–ù–í–ê–†–Ø': 0, '–§–ï–í–†–ê–õ–Ø': 1, '–ú–ê–†–¢–ê': 2, '–ê–ü–†–ï–õ–Ø': 3, '–ú–ê–Ø': 4, '–ò–Æ–ù–Ø': 5,
    '–ò–Æ–õ–Ø': 6, '–ê–í–ì–£–°–¢–ê': 7, '–°–ï–ù–¢–Ø–ë–†–Ø': 8, '–û–ö–¢–Ø–ë–†–Ø': 9, '–ù–û–Ø–ë–†–Ø': 10, '–î–ï–ö–ê–ë–†–Ø': 11
  };
  
  const parts = dayText.split(' ');
  if (parts.length >= 4) {
    const day = parseInt(parts[1]);
    const monthName = parts[2];
    const year = parseInt(parts[3]);
    
    const monthNum = monthMap[monthName];
    if (monthNum !== undefined) {
      return new Date(year, monthNum, day);
    }
  }
  return null;
}

function timeToMinutes(timeStr) {
  const [hours, minutes] = timeStr.split(':').map(Number);
  return hours * 60 + minutes;
}

function formatLeadForTable(lead) {
  return [
    lead.time,
    lead.name || '',
    lead.email || '', 
    lead.phone || '',
    lead.company || '',
    lead.project || '',
    lead.status || '–ù–æ–≤—ã–π',
    parseInt(lead.amount?.replace(/[^\d]/g, '') || '0'),
    lead.notes || ''
  ];
}

async function addLeadToMonthSheet(spreadsheetId, leadData, targetDate = null) {
  try {
    console.log(`\nüéØ –î–û–ë–ê–í–õ–Ø–ï–ú –õ–ò–î–ê: ${leadData.name}`);
    
    const authResult = await initializeAuth();
    if (!authResult || authResult.needsAuth) {
      return { success: false, error: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' };
    }

    const { auth } = authResult;
    const dateToUse = targetDate ? new Date(targetDate) : new Date();
    const year = dateToUse.getFullYear();
    const month = dateToUse.getMonth();
    
    console.log(`üìÖ –î–∞—Ç–∞: ${dateToUse.toLocaleDateString('ru-RU')}`);
    console.log(`üóìÔ∏è –ì–æ–¥: ${year} | –ú–µ—Å—è—Ü: ${getMonthName(month)}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –º–µ—Å—è—Ü–∞
    const sheetId = await getOrCreateMonthSheet(auth, spreadsheetId, year, month);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞
    const monthName = getMonthName(month);
    const sheetTitle = `${monthName} ${year}`;
    let data = await getTableData(auth, spreadsheetId, `'${sheetTitle}'!A:Z`);
    console.log(`üìã –°—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ "${sheetTitle}": ${data.length}`);
    
    // –ï—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (data.length === 0) {
      data = [];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–¥–∞ —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –Ω–µ–¥–µ–ª—å
    const result = await addLeadToMonthWithWeeks(auth, spreadsheetId, leadData, dateToUse, sheetId, data);
    if (!result.success) {
      throw new Error(result.error);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å–∞–º—ã–π –Ω–æ–≤—ã–π –º–µ—Å—è—Ü, –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –õ–∏—Å—Ç1
    await updateMainSheet(auth, spreadsheetId, year, month);
    
    console.log('‚úÖ –õ–∏–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ—Å—è—á–Ω—ã–π –ª–∏—Å—Ç!\n');
    return { success: true };
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return { success: false, error: error.message };
  }
}

async function addLeadToMonthWithWeeks(auth, spreadsheetId, leadData, targetDate, sheetId, data) {
  try {
    const components = getDateComponents(targetDate);
    
    console.log(`üóìÔ∏è –ì–æ–¥: ${components.yearFormatted} | –ú–µ—Å—è—Ü: ${components.monthFormatted} | –ù–µ–¥–µ–ª—è: ${components.weekFormatted}`);
    console.log(`üìÜ –î–µ–Ω—å: ${components.dayFormatted}`);
    
    // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–¥–µ–ª—é
    let weekPos = findWeekInMonthData(data, components.weekFormatted);
    if (weekPos === -1) {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–µ–ª—é');
      const insertPos = findWeekInsertPositionInMonth(data, components.weekFormatted);
      await insertRowsAtPosition(auth, spreadsheetId, insertPos, [[components.weekFormatted, '', '', '', '', '', '', '', '']], sheetId);
      await formatHeaders(auth, spreadsheetId, insertPos, 1, sheetId);
      data = await getTableData(auth, spreadsheetId, `'${getMonthName(targetDate.getMonth())} ${targetDate.getFullYear()}'!A:Z`);
      weekPos = findWeekInMonthData(data, components.weekFormatted);
      if (weekPos === -1) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏');
      }
      console.log(`‚úÖ –ù–µ–¥–µ–ª—è —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${weekPos}`);
    } else {
      console.log(`‚úÖ –ù–µ–¥–µ–ª—è –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${weekPos}`);
    }
    
    // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–µ–Ω—å
    let dayPos = findDayInMonthData(data, components.dayFormatted, weekPos);
    if (dayPos === -1) {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –¥–µ–Ω—å');
      const insertPos = findDayInsertPositionInMonth(data, components.dayFormatted, weekPos);
      await insertRowsAtPosition(auth, spreadsheetId, insertPos, [[components.dayFormatted, '', '', '', '', '', '', '', '']], sheetId);
      await formatHeaders(auth, spreadsheetId, insertPos, 1, sheetId);
      data = await getTableData(auth, spreadsheetId, `'${getMonthName(targetDate.getMonth())} ${targetDate.getFullYear()}'!A:Z`);
      dayPos = findDayInMonthData(data, components.dayFormatted, weekPos);
      if (dayPos === -1) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–Ω—å –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏');
      }
      console.log(`‚úÖ –î–µ–Ω—å —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${dayPos}`);
    } else {
      console.log(`‚úÖ –î–µ–Ω—å –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${dayPos}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–¥–∞
    console.log(`üìù –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–¥–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º ${leadData.time}`);
    const leadInsertPos = findLeadInsertPositionInMonth(data, leadData.time, dayPos);
    const formattedLead = formatLeadForTable(leadData);
    await insertRowsAtPosition(auth, spreadsheetId, leadInsertPos, [formattedLead], sheetId);
    
    return { success: true };
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—è—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
function findWeekInMonthData(data, weekText) {
  for (let i = 0; i < data.length; i++) {
    if (data[i] && data[i][0] === weekText) {
      return i;
    }
  }
  return -1;
}

function findDayInMonthData(data, dayText, weekPosition) {
  for (let i = weekPosition + 1; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    const text = data[i][0];
    
    if (isWeek(text)) break;
    
    if (text === dayText) return i;
  }
  return -1;
}

function findWeekInsertPositionInMonth(data, targetWeek) {
  const targetDate = getWeekDate(targetWeek);
  
  for (let i = 0; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    const text = data[i][0];
    if (isWeek(text)) {
      const currentDate = getWeekDate(text);
      if (currentDate && targetDate && targetDate > currentDate) {
        return i;
      }
    }
  }
  return data.length;
}

function findDayInsertPositionInMonth(data, targetDay, weekPosition) {
  const targetDate = getDayDate(targetDay);
  
  for (let i = weekPosition + 1; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    const text = data[i][0];
    if (isWeek(text)) return i;
    
    if (isDay(text)) {
      const currentDate = getDayDate(text);
      if (currentDate && targetDate && targetDate > currentDate) {
        return i;
      }
    }
  }
  return data.length;
}

function findLeadInsertPositionInMonth(data, targetTime, dayPosition) {
  const targetMinutes = timeToMinutes(targetTime);
  
  for (let i = dayPosition + 1; i < data.length; i++) {
    if (!data[i] || !data[i][0]) continue;
    
    const text = data[i][0];
    if (isWeek(text) || isDay(text)) return i;
    
    if (isLead(text)) {
      const currentMinutes = timeToMinutes(text);
      if (targetMinutes < currentMinutes) return i;
    }
  }
  return data.length;
}

async function updateMainSheet(auth, spreadsheetId, year, month) {
  const sheets = google.sheets({ version: 'v4', auth });
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
    const response = await withRetry(async () => {
      return await sheets.spreadsheets.get({ spreadsheetId });
    });
    
    const allSheets = response.data.sheets;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Å—è—á–Ω—ã–µ –ª–∏—Å—Ç—ã
    const monthSheets = allSheets.filter(sheet => {
      const title = sheet.properties.title;
      return /^[–ê-–Ø–∞-—è]+ \d{4}$/.test(title);
    });
    
    if (monthSheets.length === 0) return;
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –º–µ—Å—è—Ü
    monthSheets.sort((a, b) => {
      const dateA = parseSheetDate(a.properties.title);
      const dateB = parseSheetDate(b.properties.title);
      return dateB - dateA; // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    });
    
    const newestSheet = monthSheets[0];
    const newestSheetTitle = newestSheet.properties.title;
    
    console.log(`üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ–º "${newestSheetTitle}" –≤ –ø–æ–∑–∏—Ü–∏—é 0 (–≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç)`);
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –ª–∏—Å—Ç –≤ –ø–æ–∑–∏—Ü–∏—é 0
    await withRetry(async () => {
      return await sheets.spreadsheets.batchUpdate({
        spreadsheetId,
        requestBody: {
          requests: [{
            updateSheetProperties: {
              properties: {
                sheetId: newestSheet.properties.sheetId,
                index: 0
              },
              fields: 'index'
            }
          }]
        }
      });
    });
    
    console.log(`‚úÖ "${newestSheetTitle}" —Å—Ç–∞–ª –≥–ª–∞–≤–Ω—ã–º –ª–∏—Å—Ç–æ–º`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞:', error.message);
  }
}

async function addLeadToSubTable(spreadsheetId, leadData, targetDate = null) {
  try {
    console.log(`\nüéØ –î–û–ë–ê–í–õ–Ø–ï–ú –õ–ò–î–ê: ${leadData.name}`);
    
    const authResult = await initializeAuth();
    if (!authResult || authResult.needsAuth) {
      return { success: false, error: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' };
    }

    const { auth } = authResult;
    const dateToUse = targetDate ? new Date(targetDate) : new Date();
    const components = getDateComponents(dateToUse);
    
    console.log(`üìÖ –î–∞—Ç–∞: ${dateToUse.toLocaleDateString('ru-RU')}`);
    console.log(`üóìÔ∏è –ì–æ–¥: ${components.yearFormatted} | –ú–µ—Å—è—Ü: ${components.monthFormatted} | –ù–µ–¥–µ–ª—è: ${components.weekFormatted}`);
    console.log(`üìÜ –î–µ–Ω—å: ${components.dayFormatted}`);
    
    let data = await getTableData(auth, spreadsheetId, 'A:Z');
    console.log(`üìã –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${data.length}`);
    
    let yearPos = findYear(data, components.yearFormatted);
    if (yearPos === -1) {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –≥–æ–¥');
      const insertPos = findYearInsertPosition(data, components.yearFormatted);
      await insertRowsAtPosition(auth, spreadsheetId, insertPos, [[components.yearFormatted, '', '', '', '', '', '', '', '']]);
      await formatHeaders(auth, spreadsheetId, insertPos, 1);
      data = await getTableData(auth, spreadsheetId, 'A:Z');
      yearPos = findYear(data, components.yearFormatted);
      if (yearPos === -1) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–¥ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏');
      }
      console.log(`‚úÖ –ì–æ–¥ —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${yearPos}`);
    } else {
      console.log(`‚úÖ –ì–æ–¥ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${yearPos}`);
    }
    
    let monthPos = findMonth(data, components.monthFormatted, yearPos);
    if (monthPos === -1) {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –º–µ—Å—è—Ü');
      const insertPos = findMonthInsertPosition(data, components.monthFormatted, yearPos);
      await insertRowsAtPosition(auth, spreadsheetId, insertPos, [[components.monthFormatted, '', '', '', '', '', '', '', '']]);
      await formatHeaders(auth, spreadsheetId, insertPos, 1);
      data = await getTableData(auth, spreadsheetId, 'A:Z');
      monthPos = findMonth(data, components.monthFormatted, yearPos);
      if (monthPos === -1) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—Å—è—Ü –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏');
      }
      console.log(`‚úÖ –ú–µ—Å—è—Ü —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${monthPos}`);
    } else {
      console.log(`‚úÖ –ú–µ—Å—è—Ü –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${monthPos}`);
    }
    
    let weekPos = findWeek(data, components.weekFormatted, monthPos);
    if (weekPos === -1) {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–µ–ª—é');
      const insertPos = findWeekInsertPosition(data, components.weekFormatted, monthPos);
      await insertRowsAtPosition(auth, spreadsheetId, insertPos, [[components.weekFormatted, '', '', '', '', '', '', '', '']]);
      await formatHeaders(auth, spreadsheetId, insertPos, 1);
      data = await getTableData(auth, spreadsheetId, 'A:Z');
      weekPos = findWeek(data, components.weekFormatted, monthPos);
      if (weekPos === -1) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏');
      }
      console.log(`‚úÖ –ù–µ–¥–µ–ª—è —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${weekPos}`);
    } else {
      console.log(`‚úÖ –ù–µ–¥–µ–ª—è –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${weekPos}`);
    }
    
    let dayPos = findDay(data, components.dayFormatted, weekPos);
    if (dayPos === -1) {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –¥–µ–Ω—å');
      const insertPos = findDayInsertPosition(data, components.dayFormatted, weekPos);
      await insertRowsAtPosition(auth, spreadsheetId, insertPos, [[components.dayFormatted, '', '', '', '', '', '', '', '']]);
      await formatHeaders(auth, spreadsheetId, insertPos, 1);
      data = await getTableData(auth, spreadsheetId, 'A:Z');
      dayPos = findDay(data, components.dayFormatted, weekPos);
      if (dayPos === -1) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–Ω—å –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏');
      }
      console.log(`‚úÖ –î–µ–Ω—å —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${dayPos}`);
    } else {
      console.log(`‚úÖ –î–µ–Ω—å –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${dayPos}`);
    }
    
    console.log(`üìù –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–¥–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º ${leadData.time}`);
    const leadInsertPos = findLeadInsertPosition(data, leadData.time, dayPos);
    const formattedLead = formatLeadForTable(leadData);
    await insertRowsAtPosition(auth, spreadsheetId, leadInsertPos, [formattedLead]);
    
    console.log('‚úÖ –õ–∏–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n');
    return { success: true };
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return { success: false, error: error.message };
  }
}

function generateDatesForMonth(year, month) {
  const dates = [];
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  
  for (let day = 1; day <= daysInMonth; day++) {
    dates.push(new Date(year, month, day));
  }
  
  return dates;
}

function generateTestLeads(dates) {
  const companies = [
    '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ë—É–¥—É—â–µ–≥–æ', '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –ü–ª—é—Å', '–¶–∏—Ñ—Ä–æ–≤—ã–µ –†–µ—à–µ–Ω–∏—è', 
    '–°–º–∞—Ä—Ç –°–∏—Å—Ç–µ–º—ã', '–ê–π–¢–∏ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥', '–í–µ–± –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
    '–ú–æ–±–∏–ª—å–Ω—ã–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '–û–±–ª–∞—á–Ω—ã–µ –°–µ—Ä–≤–∏—Å—ã', '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –î–∞–Ω–Ω—ã—Ö',
    '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ü—Ä–æ—Ü–µ—Å—Å–æ–≤', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ë–æ–ª—å—à–∏—Ö –î–∞–Ω–Ω—ã—Ö', '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç'
  ];
  
  const names = [
    '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤', '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤', '–ê–Ω–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
    '–°–µ—Ä–≥–µ–π –ù–∏–∫–æ–ª–∞–µ–≤', '–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞', '–ê–Ω–¥—Ä–µ–π –°–æ–∫–æ–ª–æ–≤', '–û–ª—å–≥–∞ –õ–µ–±–µ–¥–µ–≤–∞',
    '–í–ª–∞–¥–∏–º–∏—Ä –ù–æ–≤–∏–∫–æ–≤', '–¢–∞—Ç—å—è–Ω–∞ –ö–æ–∑–ª–æ–≤–∞', '–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤', '–ù–∞—Ç–∞–ª—å—è –°–º–∏—Ä–Ω–æ–≤–∞',
    '–ò–≥–æ—Ä—å –ó–∞—Ö–∞—Ä–æ–≤', '–°–≤–µ—Ç–ª–∞–Ω–∞ –§–µ–¥–æ—Ä–æ–≤–∞', '–†–æ–º–∞–Ω –ê–ª–µ–∫—Å–µ–µ–≤', '–Æ–ª–∏—è –î–º–∏—Ç—Ä–∏–µ–≤–∞',
    '–ü–∞–≤–µ–ª –°—Ç–µ–ø–∞–Ω–æ–≤', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞', '–ê—Ä—Ç–µ–º –ü–∞–≤–ª–æ–≤', '–ê–ª–∏–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∞',
    '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ì–æ–ª—É–±–µ–≤', '–í–∏–∫—Ç–æ—Ä–∏—è –í–∏–Ω–æ–≥—Ä–∞–¥–æ–≤–∞', '–ù–∏–∫–æ–ª–∞–π –ë–æ–≥–¥–∞–Ω–æ–≤', '–ê–Ω–≥–µ–ª–∏–Ω–∞ –í–æ—Ä–æ–±—å–µ–≤–∞',
    '–ì–µ–æ—Ä–≥–∏–π –§–µ–¥–æ—Ç–æ–≤', '–ö—Ä–∏—Å—Ç–∏–Ω–∞ –ñ—É–∫–æ–≤–∞', '–î–∞–Ω–∏–∏–ª –°–æ–ª–æ–≤—å–µ–≤', '–í–∞–ª–µ—Ä–∏—è –†–æ–º–∞–Ω–æ–≤–∞',
    '–¢–∏–º—É—Ä –ê–±—Ä–∞–º–æ–≤', '–ê—Ä–∏–Ω–∞ –í–ª–∞—Å–æ–≤–∞', '–ú–∞–∫—Å–∏–º –ú–µ–ª—å–Ω–∏–∫–æ–≤', '–î–∏–∞–Ω–∞ –†—ã–±–∞–∫–æ–≤–∞'
  ];
  
  return dates.map((date, index) => ({
    name: names[index % names.length],
    company: companies[index % companies.length],
    time: `${9 + (index % 8)}:${(index % 4) * 15}`.padStart(5, '0'),
    amount: `${(100000 + (index % 900000) * 1000).toLocaleString('ru-RU')}`,
    date: date
  }));
}

async function fillFullMonths(spreadsheetId, year, months) {
  try {
    console.log(`üöÄ –ó–ê–ü–û–õ–ù–Ø–ï–ú –ü–û–õ–ù–´–ï –ú–ï–°–Ø–¶–´: ${year} –≥–æ–¥, –º–µ—Å—è—Ü—ã: ${months.join(', ')}\n`);

    const allLeads = [];
    
    for (const month of months) {
      const monthIndex = month - 1;
      const dates = generateDatesForMonth(year, monthIndex);
      const leads = generateTestLeads(dates);
      allLeads.push(...leads);
      
      console.log(`üìÖ ${getMonthName(monthIndex)} ${year}: ${dates.length} –¥–Ω–µ–π ‚Üí ${leads.length} –ª–∏–¥–æ–≤`);
    }
    
    console.log(`\nüéØ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${allLeads.length}\n`);

    for (let i = 0; i < allLeads.length; i++) {
      const lead = allLeads[i];
      
      console.log(`${i + 1}/${allLeads.length}. ${lead.name} | ${lead.company} | ${lead.time} | ${lead.amount} ‚ÇΩ`);
      console.log(`üìÖ –î–∞—Ç–∞: ${lead.date.toLocaleDateString('ru-RU')} (${['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'][lead.date.getDay()]})`);
      
      const result = await addLeadToSubTable(spreadsheetId, lead, lead.date);
      
      if (!result.success) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        break;
      }
      
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log('\nüéâ –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    return { success: true, totalLeads: allLeads.length };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤:', error.message);
    return { success: false, error: error.message };
  }
}

function getMonthName(monthIndex) {
  const months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                  '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
  return months[monthIndex];
}

module.exports = {
  createClientTable,
  addLeadToSubTable,
  addLeadToMonthSheet,
  initializeAuth,
  fillFullMonths,
  generateDatesForMonth,
  generateTestLeads,
};

if (require.main === module) {
  async function demo() {
    console.log('üöÄ –¢–ï–°–¢–ò–†–£–ï–ú –î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ò–î–û–í –í –†–ê–ó–ù–´–ï –ì–û–î–´\n');

    try {
      const table = await createClientTable('CRM - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ì–æ–¥—ã');
      if (!table) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É');
        return;
      }

      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: ${table.link}\n`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –º–µ—Å—è—Ü—ã —Å –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏
      const testLeads = [];
      
      // –§–µ–≤—Ä–∞–ª—å 2024 (–≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥) - –ø–æ–ª–Ω—ã–π –º–µ—Å—è—Ü
      const feb2024Dates = generateDatesForMonth(2024, 1); // —Ñ–µ–≤—Ä–∞–ª—å
      const feb2024Leads = generateTestLeads(feb2024Dates);
      testLeads.push(...feb2024Leads);
      
      // –ú–∞—Ä—Ç 2025 (–æ–±—ã—á–Ω—ã–π –≥–æ–¥) - –ø–æ–ª–Ω—ã–π –º–µ—Å—è—Ü
      const mar2025Dates = generateDatesForMonth(2025, 2); // –º–∞—Ä—Ç
      const mar2025Leads = generateTestLeads(mar2025Dates);
      testLeads.push(...mar2025Leads);
      
      // –§–µ–≤—Ä–∞–ª—å 2025 (–Ω–µ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π) - –ø–æ–ª–Ω—ã–π –º–µ—Å—è—Ü
      const feb2025Dates = generateDatesForMonth(2025, 1); // —Ñ–µ–≤—Ä–∞–ª—å
      const feb2025Leads = generateTestLeads(feb2025Dates);
      testLeads.push(...feb2025Leads);

      console.log(`üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –º–µ—Å—è—Ü—ã —Å –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏:`);
      console.log(`‚îú‚îÄ‚îÄ –§–µ–≤—Ä–∞–ª—å 2024 (–≤–∏—Å–æ–∫–æ—Å–Ω—ã–π): ${feb2024Dates.length} –¥–Ω–µ–π`);
      console.log(`‚îú‚îÄ‚îÄ –ú–∞—Ä—Ç 2025 (–æ–±—ã—á–Ω—ã–π): ${mar2025Dates.length} –¥–Ω–µ–π`);
      console.log(`‚îî‚îÄ‚îÄ –§–µ–≤—Ä–∞–ª—å 2025 (–Ω–µ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π): ${feb2025Dates.length} –¥–Ω–µ–π`);
      console.log(`\nüéØ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${testLeads.length}\n`);

      for (let i = 0; i < testLeads.length; i++) {
        const lead = testLeads[i];
        const date = new Date(lead.date);
        
        console.log(`${i + 1}/${testLeads.length}. ${lead.name} | ${lead.company} | ${lead.time} | ${lead.amount} ‚ÇΩ`);
        console.log(`üìÖ –î–∞—Ç–∞: ${date.toLocaleDateString('ru-RU')} (${['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'][date.getDay()]})`);
        
        const result = await addLeadToMonthSheet(table.spreadsheetId, lead, lead.date);
        
        if (!result.success) {
          console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
          break;
        }
        
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      console.log('\nüéâ –î–ï–ú–û –ó–ê–í–ï–†–®–ï–ù–û!');
      console.log(`üîó –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É: ${table.link}`);
      
      console.log('\nüìä –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
      console.log('üìã –ü—É—Å—Ç–æ–π –≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç —É–¥–∞–ª–µ–Ω');
      console.log('üìã –û—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º (–Ω–æ–≤—ã–µ —Å–ª–µ–≤–∞):');
      console.log('‚îú‚îÄ‚îÄ –ú–∞—Ä—Ç 2025 (–≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç)');
      console.log('‚îú‚îÄ‚îÄ –§–µ–≤—Ä–∞–ª—å 2025');
      console.log('‚îî‚îÄ‚îÄ –§–µ–≤—Ä–∞–ª—å 2024 (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π)');
      console.log('\nüìã –í –∫–∞–∂–¥–æ–º –º–µ—Å—è—Ü–µ:');
      console.log('‚îú‚îÄ‚îÄ –ù–µ–¥–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏');
      console.log('‚îú‚îÄ‚îÄ –î–Ω–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–¥–µ–ª—å');
      console.log('‚îî‚îÄ‚îÄ –õ–∏–¥—ã –≤–Ω—É—Ç—Ä–∏ –¥–Ω–µ–π');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ:', error.message);
    }
  }

  demo().catch(console.error);
}