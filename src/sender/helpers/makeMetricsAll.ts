import { getTimeStringByTime } from './helpers';
import { sendToMainBot } from './sendToMainBot';

type ClientData = {
  accountId: string;
  initTime: number;
  endTime: number;
  connectCounts: number;
  connectErrorCounts: number;
  disconnectCounts: number;
  reconnectCounts: number;
};

type ClientsData = {
  aiReqest: Record<string, number>;
  aiRetryError: Record<string, number>;
  allTimings: Array<number>;
  endSender: Record<string, number>;
  errorSender: Record<string, number>;
  peerFloods: Record<string, number>;
  phoneSearchError: Record<string, number>;
  startSender: Record<string, number>;
  withoutRecipientError: Record<string, number>;
};

type WorkerSuccessData = {
  chunkId: number;
  clients: ClientData[];
  clientsData: ClientsData;
  endTime: string;
};

export const makeMetricsAll = async (promises: WorkerSuccessData[]) => {
  const globalMetrics = {
    clients: [] as ClientData[],
    clientsData: {
      aiReqest: {},
      aiRetryError: {},
      allTimings: [] as number[],
      endSender: {},
      errorSender: {},
      peerFloods: {},
      phoneSearchError: {},
      startSender: {},
      withoutRecipientError: {},
    } as ClientsData,
  };

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–º–∏—Å–æ–≤
  for (const promise of promises) {
    const { clients, clientsData } = promise;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
    globalMetrics.clients.push(...clients);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    for (const key in clientsData) {
      if (key === 'allTimings') {
        globalMetrics.clientsData.allTimings.push(...clientsData.allTimings);
      } else {
        const target = globalMetrics.clientsData[key as keyof Omit<ClientsData, 'allTimings'>];
        const source = clientsData[key as keyof Omit<ClientsData, 'allTimings'>];
        if (typeof target === 'object' && target !== null) {
          for (const k in source) {
            (target as Record<string, number>)[k] = ((target as Record<string, number>)[k] || 0) + (source as Record<string, number>)[k];
          }
        }
      }
    }
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
  const initTimings = globalMetrics.clients.map((p) => ({
    id: p.accountId,
    value: Number(p.initTime),
  }));
  const endTimings = globalMetrics.clients.map((p) => ({
    id: p.accountId,
    value: Number(p.endTime),
  }));

  const midInitTimings = Math.floor(
    initTimings.reduce((acc, num) => acc + num.value, 0) / initTimings.length
  );
  const maxInitTiming = initTimings.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  const midEndTimings = Math.floor(
    endTimings.reduce((acc, num) => acc + num.value, 0) / endTimings.length
  );
  const maxEndTiming = endTimings.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  const connectCounts = globalMetrics.clients.map((s) => ({
    id: s.accountId,
    value: Number(s.connectCounts),
  }));
  const totalConnectCounts = connectCounts.reduce(
    (acc, num) => acc + num.value,
    0
  );
  const midConnectCounts = (totalConnectCounts / connectCounts.length).toFixed(
    2
  );
  const maxConnectCounts = connectCounts.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  const disconnectCounts = globalMetrics.clients.map((s) => ({
    id: s.accountId,
    value: Number(s.disconnectCounts),
  }));

  const totalDisconnectCounts = disconnectCounts.reduce(
    (acc, num) => acc + num.value,
    0
  );
  const midDisconnectCounts = (
    totalDisconnectCounts / disconnectCounts.length
  ).toFixed(2);
  const maxDisconnectCounts = disconnectCounts.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  const connectErrorCounts = globalMetrics.clients.map((s) => ({
    id: s.accountId,
    value: Number(s.connectErrorCounts),
  }));

  const totalConnectErrorCounts = connectErrorCounts.reduce(
    (acc, num) => acc + num.value,
    0
  );
  const midConnectErrorCounts = (
    totalConnectErrorCounts / connectErrorCounts.length
  ).toFixed(2);
  const maxConnectErrorCounts = connectErrorCounts.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  const reconnectCounts = globalMetrics.clients.map((s) => ({
    id: s.accountId,
    value: Number(s.reconnectCounts),
  }));

  const totalReconnectCounts = reconnectCounts.reduce(
    (acc, num) => acc + num.value,
    0
  );
  const midReconnectCounts = (
    totalReconnectCounts / reconnectCounts.length
  ).toFixed(2);
  const maxReconnectCounts = reconnectCounts.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤
  const chunkTimesStats = promises
    .sort((a, b) => a.chunkId - b.chunkId)
    .map(({ chunkId, endTime }) => `${chunkId}: ${endTime}`)
    .join('\n');

  console.log({
    message: 'üí• ALL CHUNKS DONE üí•',
    totalChunks: promises.length,
    totalClients: globalMetrics.clients.length,
  });

  await sendToMainBot(`üí• ALL CHUNKS DONE üí•

* –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ß–ê–ù–ö–û–í *
${chunkTimesStats}

* –ê–ö–ö–ê–£–ù–¢–´ * 
–í–°–ï–ì–û –ß–ê–ù–ö–û–í: ${promises.length}
–í –†–ê–ë–û–¢–ï: ${globalMetrics.clients.length}
–°–†–ï–î–ù–ï–ï –í–†–ï–ú–Ø –ó–ê–ü–£–°–ö–ê: ${getTimeStringByTime(midInitTimings)} (max: ${getTimeStringByTime(maxInitTiming.value)})
–°–†–ï–î–ù–ï–ï –í–†–ï–ú–Ø –†–ê–ë–û–¢–´: ${getTimeStringByTime(midEndTimings)} (max: ${getTimeStringByTime(maxEndTiming.value)})

* –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ *
REQUEST_COUNT: ${globalMetrics.clientsData.allTimings.length}
RESPONSE_TIME: ${Number(
    (
      globalMetrics.clientsData.allTimings.reduce((acc, num) => acc + Number(num), 0) /
      globalMetrics.clientsData.allTimings.length /
      1000
    ).toFixed(2)
  )}ms
CONNECT: ${totalConnectCounts} (mid: ${midConnectCounts}, max: ${maxConnectCounts.value})
RECONNECT: ${totalReconnectCounts} (mid: ${midReconnectCounts}, max: ${maxReconnectCounts.value})
DISCONNECT: ${totalDisconnectCounts} (mid: ${midDisconnectCounts}, max: ${maxDisconnectCounts.value})
NETWORK_ERRORS: ${totalConnectErrorCounts} (mid: ${midConnectErrorCounts}, max: ${maxConnectErrorCounts.value})

* –û–¢–ü–†–ê–í–ö–ò *
–ò–ù–ò–¶–ò–ò–†–û–í–ê–ù–û: ${Object.keys(globalMetrics.clientsData.startSender).length}
–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: ${Object.keys(globalMetrics.clientsData.endSender).length}
–û–®–ò–ë–û–ö: ${Object.keys(globalMetrics.clientsData.errorSender).length} ${Object.keys(globalMetrics.clientsData.peerFloods).length > 0 ? `(PEER_FLOOD: ${Object.keys(globalMetrics.clientsData.peerFloods).length}, WITHOUT_RECIPIENT: ${Object.keys(globalMetrics.clientsData.withoutRecipientError).length})` : ''}
–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–ò–°–ö–ê –ü–û –ù–û–ú–ï–†–£: ${Object.keys(globalMetrics.clientsData.phoneSearchError).length}${
    Object.keys(globalMetrics.clientsData.aiReqest).length > 0
      ? `\n\n* –ò–ò *
${Object.keys(globalMetrics.clientsData.aiReqest)
  .map((r) => `${r}: ${globalMetrics.clientsData.aiReqest[r]} requests, ${globalMetrics.clientsData.aiRetryError[r] || 0} errors`)
  .join('\n')}`
      : ''
  }`);
};
