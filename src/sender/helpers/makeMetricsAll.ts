import { getTimeStringByTime } from './helpers';
import { sendToMainBot } from './sendToMainBot';

type ClientData = {
  accountId: string;
  initTime: number;
  endTime: number;
  connectCounts: number;
  connectErrorCounts: number;
  disconnectCounts: number;
  reconnectCounts: number;
  reconnectHistory?: Array<{
    timestamp: Date;
    accountId: string;
  }>;
  metrics?: {
    sent: number;
    received: number;
    sentSize: number;
    receivedSize: number;
  };
};

type ClientsData = {
  aiReqest: Record<string, number>;
  aiRetryError: Record<string, number>;
  allTimings: Array<number>;
  errorSender: Record<string, number>;
  peerFloods: Record<string, number>;
  phoneSearchError: Record<string, number>;
  startSender: Record<string, number>;
  withoutRecipientError: Record<string, number>;
  messageStats?: Record<string, { single: boolean; double: boolean }>;
};

type WorkerSuccessData = {
  chunkId: number;
  clients: ClientData[];
  clientsData: ClientsData;
  endTime: string;
  isFrozen: boolean;
};

export const makeMetricsAll = async (
  promises: WorkerSuccessData[],
  startTime: number = Date.now()
) => {
  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–∞—á–∫–∏ –Ω–∞ frozen –∏ regular
  const frozenPromises = promises.filter(p => p.isFrozen);
  const regularPromises = promises.filter(p => !p.isFrozen);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
  const createGlobalMetrics = () => ({
    clients: [] as ClientData[],
    clientsData: {
      aiReqest: {},
      aiRetryError: {},
      allTimings: [] as number[],
      errorSender: {},
      peerFloods: {},
      phoneSearchError: {},
      startSender: {},
      withoutRecipientError: {},
      messageStats: {},
    } as ClientsData,
  });

  const globalMetrics = createGlobalMetrics();
  const frozenMetrics = createGlobalMetrics();
  const regularMetrics = createGlobalMetrics();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ–º–∏—Å–æ–≤
  const mergeMetrics = (targetMetrics: ReturnType<typeof createGlobalMetrics>, sourcePromises: WorkerSuccessData[]) => {
    for (const promise of sourcePromises) {
      const { clients, clientsData } = promise;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
      targetMetrics.clients.push(...clients);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
      for (const key in clientsData) {
        if (key === 'allTimings') {
          targetMetrics.clientsData.allTimings.push(...clientsData.allTimings);
        } else {
          const target =
            targetMetrics.clientsData[
              key as keyof Omit<ClientsData, 'allTimings'>
            ];
          const source =
            clientsData[key as keyof Omit<ClientsData, 'allTimings'>];
          if (typeof target === 'object' && target !== null) {
            for (const k in source) {
              (target as Record<string, number>)[k] =
                ((target as Record<string, number>)[k] || 0) +
                (source as Record<string, number>)[k];
            }
          }
        }
      }
    }
  };

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ—Ç—Ä–∏–∫
  mergeMetrics(globalMetrics, promises);
  mergeMetrics(frozenMetrics, frozenPromises);
  mergeMetrics(regularMetrics, regularPromises);

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
  const initTimings = globalMetrics.clients.map((p) => ({
    id: p.accountId,
    value: Number(p.initTime),
  }));
  const endTimings = globalMetrics.clients.map((p) => ({
    id: p.accountId,
    value: Number(p.endTime),
  }));

  const midInitTimings = Math.floor(
    initTimings.reduce((acc, num) => acc + num.value, 0) / initTimings.length
  );
  const maxInitTiming = initTimings.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  const midEndTimings = Math.floor(
    endTimings.reduce((acc, num) => acc + num.value, 0) / endTimings.length
  );
  const maxEndTiming = endTimings.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  const connectCounts = globalMetrics.clients.map((s) => ({
    id: s.accountId,
    value: Number(s.connectCounts),
  }));
  const totalConnectCounts = connectCounts.reduce(
    (acc, num) => acc + num.value,
    0
  );
  const midConnectCounts = (totalConnectCounts / connectCounts.length).toFixed(
    2
  );
  const maxConnectCounts = connectCounts.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  const disconnectCounts = globalMetrics.clients.map((s) => ({
    id: s.accountId,
    value: Number(s.disconnectCounts),
  }));

  const totalDisconnectCounts = disconnectCounts.reduce(
    (acc, num) => acc + num.value,
    0
  );
  const midDisconnectCounts = (
    totalDisconnectCounts / disconnectCounts.length
  ).toFixed(2);
  const maxDisconnectCounts = disconnectCounts.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  const connectErrorCounts = globalMetrics.clients.map((s) => ({
    id: s.accountId,
    value: Number(s.connectErrorCounts),
  }));

  const totalConnectErrorCounts = connectErrorCounts.reduce(
    (acc, num) => acc + num.value,
    0
  );
  const midConnectErrorCounts = (
    totalConnectErrorCounts / connectErrorCounts.length
  ).toFixed(2);
  const maxConnectErrorCounts = connectErrorCounts.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  const reconnectCounts = globalMetrics.clients.map((s) => ({
    id: s.accountId,
    value: Number(s.reconnectCounts),
  }));

  const totalReconnectCounts = reconnectCounts.reduce(
    (acc, num) => acc + num.value,
    0
  );
  const midReconnectCounts = (
    totalReconnectCounts / reconnectCounts.length
  ).toFixed(2);
  const maxReconnectCounts = reconnectCounts.reduce((max, current) =>
    current.value > max.value ? current : max
  );

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤
  const chunkTimesStats = promises
    .sort((a, b) => a.chunkId - b.chunkId)
    .map(({ chunkId, endTime }) => `${chunkId}: ${endTime}`)
    .join('\n');

  console.log({
    message: 'üí• ALL CHUNKS DONE üí•',
    totalChunks: promises.length,
    totalClients: globalMetrics.clients.length,
    frozenChunks: frozenPromises.length,
    frozenClients: frozenMetrics.clients.length,
    regularChunks: regularPromises.length,
    regularClients: regularMetrics.clients.length,
  });

  const reconnectDistribution: Record<string, number> = {};

  for (const client of globalMetrics.clients) {
    const count = client.reconnectCounts;
    const key = count.toString();
    reconnectDistribution[key] = (reconnectDistribution[key] || 0) + 1;
  }

  const sortedKeys = Object.keys(reconnectDistribution)
    .map(Number)
    .sort((a, b) => a - b);

  function getWordForm(number: number, wordForms: string[]): string {
    const cases = [2, 0, 1, 1, 1, 2];
    return wordForms[
      number % 100 > 4 && number % 100 < 20
        ? 2
        : cases[Math.min(number % 10, 5)]
    ];
  }

  let reconnectStats = '';
  if (sortedKeys.length > 0) {
    const statsLines = sortedKeys.map((key) => {
      const count = reconnectDistribution[key.toString()];
      const accountWord = getWordForm(count, [
        '–∞–∫–∫–∞—É–Ω—Ç',
        '–∞–∫–∫–∞—É–Ω—Ç–∞',
        '–∞–∫–∫–∞—É–Ω—Ç–æ–≤',
      ]);
      const reconnectSuffix = getWordForm(key, ['', '–ê', '–û–í']);

      return `‚ñ™Ô∏è ${key === 0 ? '–ë–ï–ó –†–ï–ö–û–ù–ù–ï–ö–¢–û–í' : `${key} –†–ï–ö–û–ù–ù–ï–ö–¢${reconnectSuffix}`}: ${count} ${accountWord}`;
    });

    reconnectStats = statsLines.join('\n');
  } else {
    reconnectStats = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞—Ö';
  }

  let totalSingleSends = 0;
  let totalDoubleSends = 0;
  let totalCompletedSends = 0;
  
  const mergedMessageStats: Record<string, { single: boolean; double: boolean }> = {};
  
  for (const promise of promises) {
    const { clientsData } = promise;
    
    if (clientsData.messageStats) {
      for (const accountId in clientsData.messageStats) {
        const metrics = clientsData.messageStats[accountId];
        
        if (!mergedMessageStats[accountId]) {
          mergedMessageStats[accountId] = { single: false, double: false };
        }
        
        if (metrics?.single) {
          mergedMessageStats[accountId].single = true;
          totalSingleSends++;
        }
        
        if (metrics?.double) {
          mergedMessageStats[accountId].double = true;
          totalDoubleSends++;
          if (metrics?.single) {
            totalSingleSends--;
          }
        }
        
        if (metrics?.single || metrics?.double) {
          totalCompletedSends++;
        }
      }
    }
  }
  
  globalMetrics.clientsData.messageStats = mergedMessageStats;

  await sendToMainBot(`üí• ALL CHUNKS DONE üí•

* –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ß–ê–ù–ö–û–í *
${chunkTimesStats}

* –ê–ö–ö–ê–£–ù–¢–´ *
–í–°–ï–ì–û –ß–ê–ù–ö–û–í: ${promises.length} (FROZEN: ${frozenPromises.length}, REGULAR: ${regularPromises.length})
–í –†–ê–ë–û–¢–ï: ${globalMetrics.clients.length} (FROZEN: ${frozenMetrics.clients.length}, REGULAR: ${regularMetrics.clients.length})
–°–†–ï–î–ù–ï–ï –í–†–ï–ú–Ø –ó–ê–ü–£–°–ö–ê: ${getTimeStringByTime(midInitTimings)} (max: ${getTimeStringByTime(maxInitTiming.value)})
–°–†–ï–î–ù–ï–ï –í–†–ï–ú–Ø –†–ê–ë–û–¢–´: ${getTimeStringByTime(midEndTimings)} (max: ${getTimeStringByTime(maxEndTiming.value)})

* –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ *
REQUEST_COUNT: ${globalMetrics.clientsData.allTimings.length}
RESPONSE_TIME: ${Number(
    (
      globalMetrics.clientsData.allTimings.reduce(
        (acc, num) => acc + Number(num),
        0
      ) /
      globalMetrics.clientsData.allTimings.length /
      1000
    ).toFixed(2)
  )}ms
CONNECT: ${totalConnectCounts} (mid: ${midConnectCounts}, max: ${maxConnectCounts.value})
RECONNECT: ${totalReconnectCounts} (mid: ${midReconnectCounts}, max: ${maxReconnectCounts.value})
DISCONNECT: ${totalDisconnectCounts} (mid: ${midDisconnectCounts}, max: ${maxDisconnectCounts.value})
NETWORK_ERRORS: ${totalConnectErrorCounts} (mid: ${midConnectErrorCounts}, max: ${maxConnectErrorCounts.value})

* –û–¢–ü–†–ê–í–ö–ò *
–ò–ù–ò–¶–ò–ò–†–û–í–ê–ù–û: ${Object.keys(globalMetrics.clientsData.startSender).length}
–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û (–í–°–ï–ì–û): ${totalCompletedSends}
–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û (–û–î–ò–ù–ê–†–ù–´–•): ${totalSingleSends}
–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û (–î–í–û–ô–ù–´–•): ${totalDoubleSends}
–û–®–ò–ë–û–ö: ${Object.keys(globalMetrics.clientsData.errorSender).length} ${Object.keys(globalMetrics.clientsData.peerFloods).length > 0 ? `(PEER_FLOOD: ${Object.keys(globalMetrics.clientsData.peerFloods).length}, WITHOUT_RECIPIENT: ${Object.keys(globalMetrics.clientsData.withoutRecipientError).length})` : ''}
–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–ò–°–ö–ê –ü–û –ù–û–ú–ï–†–£: ${Object.keys(globalMetrics.clientsData.phoneSearchError).length}${
    Object.keys(globalMetrics.clientsData.aiReqest).length > 0
      ? `\n\n* –ò–ò *
${Object.keys(globalMetrics.clientsData.aiReqest)
  .map(
    (r) =>
      `${r}: ${globalMetrics.clientsData.aiReqest[r]} requests, ${globalMetrics.clientsData.aiRetryError[r] || 0} errors`
  )
  .join('\n')}`
      : ''
  }`);

  const allReconnectHistory: Array<{
    timestamp: Date;
    accountId: string;
  }> = [];

  for (const client of globalMetrics.clients) {
    if (client.reconnectHistory && client.reconnectHistory.length > 0) {
      allReconnectHistory.push(...client.reconnectHistory);
    }
  }

  let minuteStatsText = '';
  let startDate: Date | null = null;

  if (allReconnectHistory.length > 0) {
    startDate = new Date(startTime);

    const minuteDistribution: Record<number, number> = {};

    for (const reconnect of allReconnectHistory) {
      const diffMinutes = Math.floor(
        (reconnect.timestamp.getTime() - startDate.getTime()) / (1000 * 60)
      );
      minuteDistribution[diffMinutes] =
        (minuteDistribution[diffMinutes] || 0) + 1;
    }

    const normalizedMinutes: Record<number, number> = {};
    const sortedMinutes = Object.keys(minuteDistribution)
      .map(Number)
      .sort((a, b) => a - b);

    sortedMinutes.forEach((originalMinute, index) => {
      const normalizedMinute = index + 1;
      normalizedMinutes[normalizedMinute] = minuteDistribution[originalMinute];
    });

    const minuteStats = Object.keys(normalizedMinutes)
      .map(Number)
      .sort((a, b) => a - b)
      .map((minute) => {
        const count = normalizedMinutes[minute];
        const reconnectWord = getWordForm(count, [
          '–∞–∫–∫–∞—É–Ω—Ç  ',
          '–∞–∫–∫–∞—É–Ω—Ç–∞',
          '–∞–∫–∫–∞—É–Ω—Ç–æ–≤',
        ]);

        return `‚ñ´Ô∏è ${minute}-–ê–Ø –ú–ò–ù–£–¢–ê: ${count} ${reconnectWord}`;
      });

    if (minuteStats.length > 0) {
      minuteStatsText = minuteStats.join('\n');
    }
  }

  await sendToMainBot(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ö–û–ù–ù–ï–ö–¢–û–í üìä

–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –†–ï–ö–û–ù–ù–ï–ö–¢–ê–ú
${reconnectStats}
${minuteStatsText ? `\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ú–ò–ù–£–¢–ê–ú\n${minuteStatsText}` : ''}`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
  await sendToMainBot(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–¢–ï–í–û–ì–û –¢–†–ê–§–ò–ö–ê üìä

${getTrafficReport(globalMetrics.clients)}`);
};

function getTrafficReport(clients: ClientData[]): string {
  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
  const clientsWithMetrics = clients.filter((client) => client.metrics);
  
  if (clientsWithMetrics.length === 0) {
    return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ñ–∏–∫–µ';
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–∑–º–µ—Ä
  const totalSent = clientsWithMetrics.reduce((acc, client) => acc + (client.metrics?.sent || 0), 0);
  const totalReceived = clientsWithMetrics.reduce((acc, client) => acc + (client.metrics?.received || 0), 0);
  const totalSentSize = clientsWithMetrics.reduce((acc, client) => acc + (client.metrics?.sentSize || 0), 0);
  const totalReceivedSize = clientsWithMetrics.reduce((acc, client) => acc + (client.metrics?.receivedSize || 0), 0);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const avgSent = totalSent / clientsWithMetrics.length;
  const avgReceived = totalReceived / clientsWithMetrics.length;
  const avgSentSize = totalSentSize / clientsWithMetrics.length;
  const avgReceivedSize = totalReceivedSize / clientsWithMetrics.length;

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  const formatBytes = (bytes: number): string => {
    if (bytes === 0) return '0 –ë';
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;
  };

  // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–æ–≤
  const formatTop = (list: Array<{ id: string; value: number }>, isByteSize = false): string => {
    return list
      .map((item, index) => {
        const value = isByteSize ? formatBytes(item.value) : item.value.toFixed(0);
        return `${index + 1}. ${item.id}: ${value}`;
      })
      .join('\n');
  };

  // –¢–æ–ø 5 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
  const topBySentPackets = clientsWithMetrics
    .map((client) => ({
      id: client.accountId,
      value: client.metrics?.sent || 0,
    }))
    .sort((a, b) => b.value - a.value)
    .slice(0, 5);

  // –¢–æ–ø 5 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
  const topByReceivedPackets = clientsWithMetrics
    .map((client) => ({
      id: client.accountId,
      value: client.metrics?.received || 0,
    }))
    .sort((a, b) => b.value - a.value)
    .slice(0, 5);

  // –¢–æ–ø 5 –ø–æ —Ä–∞–∑–º–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const topBySentSize = clientsWithMetrics
    .map((client) => ({
      id: client.accountId,
      value: client.metrics?.sentSize || 0,
    }))
    .sort((a, b) => b.value - a.value)
    .slice(0, 5);

  // –¢–æ–ø 5 –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const topByReceivedSize = clientsWithMetrics
    .map((client) => ({
      id: client.accountId,
      value: client.metrics?.receivedSize || 0,
    }))
    .sort((a, b) => b.value - a.value)
    .slice(0, 5);

  // –¢–æ–ø 5 –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Ä–∞–∑–º–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
  const topByAvgSentPacketSize = clientsWithMetrics
    .map((client) => ({
      id: client.accountId,
      value: (client.metrics?.sent || 0) > 0 
        ? (client.metrics?.sentSize || 0) / (client.metrics?.sent || 1) 
        : 0,
    }))
    .sort((a, b) => b.value - a.value)
    .slice(0, 5);

  // –¢–æ–ø 5 –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Ä–∞–∑–º–µ—Ä—É –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
  const topByAvgReceivedPacketSize = clientsWithMetrics
    .map((client) => ({
      id: client.accountId,
      value: (client.metrics?.received || 0) > 0 
        ? (client.metrics?.receivedSize || 0) / (client.metrics?.received || 1) 
        : 0,
    }))
    .sort((a, b) => b.value - a.value)
    .slice(0, 5);

  // –¢–æ–ø 5 —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º —Å—Ä–µ–¥–Ω–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
  const bottomByAvgSentPacketSize = clientsWithMetrics
    .filter((client) => (client.metrics?.sent || 0) > 0)
    .map((client) => ({
      id: client.accountId,
      value: (client.metrics?.sentSize || 0) / (client.metrics?.sent || 1),
    }))
    .sort((a, b) => a.value - b.value)
    .slice(0, 5);

  // –¢–æ–ø 5 —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º —Å—Ä–µ–¥–Ω–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
  const bottomByAvgReceivedPacketSize = clientsWithMetrics
    .filter((client) => (client.metrics?.received || 0) > 0)
    .map((client) => ({
      id: client.accountId,
      value: (client.metrics?.receivedSize || 0) / (client.metrics?.received || 1),
    }))
    .sort((a, b) => a.value - b.value)
    .slice(0, 5);

  return `–í–°–ï–ì–û –û–¢–ü–†–ê–í–õ–ï–ù–û –ü–ê–ö–ï–¢–û–í: ${totalSent} (${formatBytes(totalSentSize)})
–í–°–ï–ì–û –ü–û–õ–£–ß–ï–ù–û –ü–ê–ö–ï–¢–û–í: ${totalReceived} (${formatBytes(totalReceivedSize)})
–í–°–ï–ì–û –¢–†–ê–§–ò–ö–ê: ${formatBytes(totalSentSize + totalReceivedSize)}

–°–†–ï–î–ù–ï–ï –û–¢–ü–†–ê–í–õ–ï–ù–û: ${avgSent.toFixed(2)} –ø–∞–∫–µ—Ç–æ–≤ (${formatBytes(avgSentSize)})
–°–†–ï–î–ù–ï–ï –ü–û–õ–£–ß–ï–ù–û: ${avgReceived.toFixed(2)} –ø–∞–∫–µ—Ç–æ–≤ (${formatBytes(avgReceivedSize)})
–°–†–ï–î–ù–ò–ô –¢–†–ê–§–ò–ö –ù–ê –ê–ö–ö–ê–£–ù–¢: ${formatBytes(avgSentSize + avgReceivedSize)}

–°–†–ï–î–ù–ò–ô –†–ê–ó–ú–ï–† –ü–ê–ö–ï–¢–ê (–û–¢–ü–†–ê–í–ö–ê): ${formatBytes(totalSent > 0 ? totalSentSize / totalSent : 0)}
–°–†–ï–î–ù–ò–ô –†–ê–ó–ú–ï–† –ü–ê–ö–ï–¢–ê (–ü–û–õ–£–ß–ï–ù–ò–ï): ${formatBytes(totalReceived > 0 ? totalReceivedSize / totalReceived : 0)}

* –¢–û–ü –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ü–ê–ö–ï–¢–û–í *
–û–¢–ü–†–ê–í–õ–ï–ù–û:
${formatTop(topBySentPackets)}

–ü–û–õ–£–ß–ï–ù–û:
${formatTop(topByReceivedPackets)}

* –¢–û–ü –ü–û –û–ë–™–ï–ú–£ –î–ê–ù–ù–´–• *
–û–¢–ü–†–ê–í–õ–ï–ù–û:
${formatTop(topBySentSize, true)}

–ü–û–õ–£–ß–ï–ù–û:
${formatTop(topByReceivedSize, true)}

* –¢–û–ü –ü–û –°–†–ï–î–ù–ï–ú–£ –†–ê–ó–ú–ï–†–£ –ü–ê–ö–ï–¢–ê *
–°–ê–ú–´–ï –ë–û–õ–¨–®–ò–ï (–û–¢–ü–†–ê–í–ö–ê):
${formatTop(topByAvgSentPacketSize, true)}

–°–ê–ú–´–ï –ë–û–õ–¨–®–ò–ï (–ü–û–õ–£–ß–ï–ù–ò–ï):
${formatTop(topByAvgReceivedPacketSize, true)}

–°–ê–ú–´–ï –ú–ê–õ–ï–ù–¨–ö–ò–ï (–û–¢–ü–†–ê–í–ö–ê):
${formatTop(bottomByAvgSentPacketSize, true)}

–°–ê–ú–´–ï –ú–ê–õ–ï–ù–¨–ö–ò–ï (–ü–û–õ–£–ß–ï–ù–ò–ï):
${formatTop(bottomByAvgReceivedPacketSize, true)}`;
}
