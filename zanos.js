const { MongoClient } = require('mongodb');

let db;

const DB = async () => {
  while (!db) {
    try {
      const client = new MongoClient(
        'mongodb://gen_user:35B%3DR9GTC%5Cq.Xv@82.97.255.185:27017/core?authSource=admin&directConnection=true'
      );
      const connect = await client.connect();
      db = connect.db('fucker');
      break;
    } catch {}
  }

  return db;
};

const getAccountCollection = async () => {
  return (await DB()).collection('accounts');
};

const insertAccount = async (account) => {
  const accountCollection = await getAccountCollection();

  await accountCollection.updateOne(
    { accountId: account.accountId },
    { $set: account },
    { upsert: true }
  );
};

const accountsString = `95eaecd2c9a2cb96b0e69612867e3f369b9a0a62b764a1413640a582bbc5b738c712c6a075802dee89ad00ae20417cd647b1b5e30d886f369bdcee98132dfa9a66597133e0009a733fb14363acc961eaafdf55713e12e00ed9825d8e5c9cbc3745d4bd8de8c5464b6c5fdf120db095b7d05cc194fb75b83e192c59fffc864403e3c0a743c1ead7b5eaff7791fc90999f0e05295de61d1a5921e2a764e00b2423d45f2c1e2b03b0447028f47af81a87324166394982e711bea13d9b1a76e0f85cf1e9cefd3d100dc7fa570c3b7659ab325145a7e7fd71b32bd4fab153b0c1383bb96f700adc487eedb5e2f49ad312b4e317a8acd0b5842358609814e00487facd:2
9fe05b8730dc534cae40cb9f3a03357f6cccea00cd39f818ec80523109e4c245b9ec0c242710734700f49752b1401d478f69f6ca4425290e0aa7146dc34e40313fb1c22ca7bd9c1e09170c2a63e88631847b427852e3f6ce54ab2dee421b8ec9bcbaf37b059ebddb3d618bfaeea66f4fb69b3bdae476b3e221ab1fcef05e6be6713e3bed8f14d97da26d39fadd38eae36aa412bb97fca24c5791041bc567690cd5d1f38948078b232d4c5802c7020033b7ce35c8d8226822d90c6ef09e2a35753a4354b236b9428f8461997405cc7eb6ca1cc8dea0df9dace5e3dfce2a1a649a525cfa8c3a9f753399a7009680516a4784717455888d7987382baa6648940b8a:2
4dd670cd1504f9e8e8b323cf186297025b47c4000d9843ffc79ecb3bbb8b4413cf9cd74aa1cf9944048c2d1c5da20ba7593a826305d3eeebb6c1d48420def6ce4b2c495301014edf73ee157b3ab11dc1b3f2d988885df73aaec8f658e9e422f2a5389181268a99505751cd2b5cd9c82f4ed86799f9840378750d9bf9aa3867394bfe5907f60aa9b6602532bb68f2bb2b822ef258e77d462d9c4b3840c5f4af220ec4e3a982daecd737fc7dd5fa86b789f5e56a0fe9e6705b04048656366090d37763b6ec3203c2e17085fc564e90d5f0d39816a23bd01c03744b8696c0cfabc47cb822782da6bfdc1dd22908a3c75f5b0afa94ff9dd23431464d212bea15d85f:2
61f40744cd328fe27368f48a00a8f1aafb53899caef14e917b0f1cd47b44367c55e6b84ce72807eeecd0a72317a8adb1503c85e51d97cf96a8dd709ce4e933b11d8281aca853fc7904c03eeb0eff12bbf63379f3d676ea63be6e1d860808fe694bd62e9d93e5d1289d4e45f8e846061d90679a4f78228d83bc9a8e8b467262228d3681b08ffb7ec863fe9e820f90d149bf1754c43fdacf80be67e1fa53fb9fb52b9eb5e4f48dfcd2f6a2b1282b8525c579d14f773188a2a55f53c9e5c6c03f9c147a745ddcee0ba9e5c93b4597f504bbcc2889446e749ea4162eb4cc87867b6215663e289552cf82dcda044475720934d54888dab32e506d836d1ed45856306a:2
8ba6e24478c3e5666d96a39cdd9f1d235254c231a5f4e1b323023996ab694d1bcd51fa5bdf468b67a07234078eab4f3a9aad71e5f28aad6cb049b2b27c54909c3112aaaaa9db2ecea5ced7cb6f1006694634eebed0edd2db8e2cfecdf0a6834b2f0e2e2a6bae68b70a14a05e45cdcf16607ba565425a2abd050b1d276946a1b441af91ca3ab4180af5bfd6f926fc5aec70422431c773e77a3ece090ca46eaf155a49c3df939934edd5ef105cdfd216fefe4d76f5886ec7daf3418a113050e674a437ca9bace13cf337236a7876a1640ec27e2e65e9e343ca568a12a283ec23e3efbe92da76f392c6257a1ba41022be8952b9d72f8afb727f5ee361bdbb5ec357:2
bb01851c5467461eb97a590dcf45de62aa8e2c234c7e34e429dc7e77f46730a701cd9f641e298dc235377bb6e915296209a7bb52c0676b644687e394c06363967c4c61780468abeb0e5423b34eaea4a03f0371de19374ba4c125a8400063eba5947bbdb882d055cb5004cad7de468a30f3a3c11b8da6eadaa06c8e7613f7d7ca2f8ab8458101074b150f5c8c517e26c282439554200f7f14c03e5b88984edde4d8a471b78ddaccdefc6ee1cb8097420bcaaba44243ab762249ac5f2f498756f09fd4d4c937139aa084eec1768c25a976f7bc6a52688aac3dd99ca8ccd2ea4c8029c8a2fa63bd03ca5ad71bbb1780c9fe28ee8e63d30efc93d05a2d2d41e5b5c3:2
01e6f8934a2ae41bb425f186cc5168a10e94a77dc19a68a2efc7e84d9915ed451d191f0a3427262ce0a0d1116b6641099604399b237c52c5b8a24e0f6da8a2b162732b91db002b0af9fcdbad504f560b437a96291d77ce5620c3deac29569f0dd77e56feed2f88a0441d9127b62d2da158ca4d0025a24620cf0da3a5b646f917174c7ae7dcad6051cec833d5ea854289ab69f33351b86d65bfa58d32efc33b3796eeea21e036174659593a3747484bcfe8c84af4730e40fc389eaae62b53f14f0668c1c31f81a90bb259b703894e16c337dbedc0073132d227ee683632be30e8f648a33d0919ca58012f13e4b7a1ae7b7f36ecc3083b4fe8a3dadc752706f585:2
5d8a01271e96121142630ce0f02989dbbf452b584f890cc84d434688d346da64db7a042935730accafe2ba0b7bb6cf650823ca4f081e15ebc755cd66a1abaa4548edb77875c6dc4a197d2845b7d35e89f651d96c14f6c3febf90d2f521d473820067ff2dc0df04d8470f370822ce6c6a43acd2a496c3a95d2fbfb89a843d2c00d8fd31a3421e42759b1d397b91499de2b1d8c057da729c289b066febc956cfd2312641666db2487bfaf12a7b2c95671637db52d061a622b7924a074c501b2abd9dcffc25b734dfb46c6389d106b9fbd60e84649adca48ba8e8f348d717ebe88044eae00ec0519efca3a8d55f386b72cb3bebfa85293413f656d6959d4d22c800:2
9cf0f46b85b03d3acadb2013ef10fd5387513e9c3877fd78e3c1470ab70397ecd97fbffb87c33f47d4294914698e6c5b3c265aae1d67f142f6e2cb5fe2cf5e724e4b005874ef845b8e40439303f2fbeba4134a0d897e6ef3b5f01a8287f3891d0c74eb0d78d8f7b2a59f731fb553f60390054372cd83db48ef6a7f4b717ba0be0946f3eb3d42c5d3ffdbdb06b1e68b8684d8db4b2f31b55bef84d763ab17d23aa36b861a5adca8a7776a467b88e6e1440bce3f37c1fee2bf9f98a0d4104b748475f18cf09806757863b282b2ab62925783a8d5ebed714aee46912c94676196cdbe3c5383f8391a991387c99c19b85d6c4c78746e3085dfd10413d1a316f9c5b3:2
4ccce45d15ca6f9ef7ecb7509a2ca3bab87cc44be2ff1caf0492c38dc6ad3b30e88f632522c2c648a88827d56c03205980230791bd2c813602339b5fe90ccf249232c393dc1945844399181b4acb1a7168e7ce26ae3a22014f95e17b4304be05dcd5edabc777473bcf8c2885f6191abeefb5a6e8dcc903e86b979c11793d98e6a37da5dab4ee7c3d7a6830c8edb50bc7ab9dd2a3677320c6ee7fcf9f9aa44c0df1635fc2bb8cdba1884cb999a3a79e8bb96f811a9e84f88ef845d260d59bf19516650351af2cdc412026fdc0a9ee86027370fd22145574c85ceb56177584bc610d22b027b35a171e2f18c88def3af224af45bc7dc4a5c25caae38d68eaa26105:2
22f658d899efdcd741544f0ec422e289f2d416b75435028441cafb4fd999b83f1ebd93d7e143cfe0dcaf8ddebbfeef796ff0a2ca085b5a2c5185bd57b82980dd384b6cfa6f091846cb95441c77f3218261a5c94453588986c204d73dfb6a58c3831454a18993b1eb1567981b5e782f13ab67b280addd0441046cd1b17851136147c26ca265784abbcfc4938701c8077834b3dec2a5bbdb6a4988cab033b28837010a3cb1519519f2e2e5eb44399d8654e71b705d0bf5753b4ee8a13fde13372da1948227083f577421a670f62e7c504e1b0902681978916440b0398b683c45502129edbad8472877d64ddbfcb523b877a208169d73bf7e5709c608412c9b2791:2`

//  .map((e) => `${e[`dc${e.dcId}`]}:${e.dcId}`)
// .join('\n'))
const accounts = accountsString
  .split('\n')
  .filter(Boolean)
  .map((a) => {
    const s = a.split(':');

    return { authKey: s[0], dcId: s[1] };
  });

const zanos = async () => {
  try {
    for (const account of accounts) {
      const username = account.authKey.slice(0, 32);

      const data = {
        accountId: username,
        dcId: Number(account.dcId),
        prefix: 'test-govna',
      };

      data[`dc${account.dcId}`] = account.authKey;
      // await insertAccount(data);
    }
    console.log('VSE');
  } catch (error) {
    console.error('Ошибка при обработке файлов:', error);
  }
};

// Вызываем функцию zanos
zanos().catch((error) => {
  console.error('Ошибка в функции zanos:', error);
});
