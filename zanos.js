const { MongoClient } = require('mongodb');

let db;

const DB = async () => {
  while (!db) {
    try {
      const client = new MongoClient(
        'mongodb://gen_user:35B%3DR9GTC%5Cq.Xv@82.97.255.185:27017/core?authSource=admin&directConnection=true'
      );
      const connect = await client.connect();
      db = connect.db('fucker');
      break;
    } catch {}
  }

  return db;
};

const getAccountCollection = async () => {
  return (await DB()).collection('accounts');
};

const insertAccount = async (account) => {
  const accountCollection = await getAccountCollection();

  await accountCollection.updateOne(
    { accountId: account.accountId },
    { $set: account },
    { upsert: true }
  );
};

const accountsString = `6308148467ea22ef619129ba0acf8fb2853fcf4bf62ade2b08cd699224b6ba5be2a29817783e9f210d870174b14c188fd8befcec6bde327b7b37b1e44b19f57f7a75c9e75f4ad2625b099c25628c40dc0bf64d045f98f88912bce2dc97646caf54021d5d0510ca83823cb66b0eceea4d8519c728f18a21317b0555cc104011496d07e6ace06863b97cf9ef11e005ec1787a5b493aff439982068a34660bdc0b472798f3f8ba2d0ce72b93f20d90199b2d6bc285127f60b5fd15a31e55a25af34a3ffd6179d6946c4782c2502730b727705de7e53218434ee8a76aa0bdab25330a4de9b9850ad5c9e1f5a258de6f96cf16e4a67e1b27d5ab47feec1620f8d4fb5:2
290858ea9698ca012a685f32b56507c8f3bbeaf2b1d63736dd784eb4f3e604e56c94a5202b9d1ca10b5436fb0da034a90e671da411f2729010ca8e30a570ab093f153afc0e33fda63923ed61e541daa4b75a1d645ef9e1e461696fa48cf7c42b254571f265ec4290f6e3be2f7c9f0fe0dab74c116010aae4c895e51738afb856213a6494af56f99e6ed1a9fffd0d79cbfc3b4de2d7a9a372cdeb1a6cf8d4545392da59409da03621d62cd9e916763056525289766d76fcc0701beb9916de035ec08b664b4de9630e68d7c058a4fb143beea4f74fdfe50718cebf65a19d15582e6e8ed6d466afe87034850ed8539ae04ba8f7e9eb6486a4d6b57a603707da14b9:2
22be26dfd5f057a0306d1f22bd53b50ac931dbaa5c08136c509a84fc5ebb0026af119a7b74d90716e07cd0d072c6053fcda2023135f50648b960bc95b743dd3b041ef593b89b1f945bb4151790cd239f12745eb951f51ded810575789d6b2fdbc7f908bb57534d9f05cd707d3ee50b53336211dc6bb2bd2591432fcee61bb92173a32bdd6cae5eabb7be52e7e6e763994dbf6eaf30ac92a80180f7ad2fddf987ce310196520696e1d36ec44acdc402e14729d56235f80c98490b94c9d30830f3c890f0cd1151f911b393db770f84eef27a1bcd8162ac9167a8799976b00441c685eec66144f1cd1889f831709b3f2e44bb68eedcc813f77893adececbfea86e8:2
4dcbbe6f14ea2b8f34a751d1ddbb75382c7b55e390d2bfe2e7429dc2de0a8deba9bf414b0adf9a68f3d3f29ec8b9e691b919a707846c7f54a8069a337ea5ec2920081b84dc0f422abdaab5a45fdc0173659f66aa5d339d2cc31cb0e106473290102104b20235734c619f1bc08846c6f0d4b7ce212244a4d317cd305bd283e723595421ba6d5d3b60bb76d8cc2bb3b3489978d1ad234e159e0d34bdd1c8193db9379b627a8fcdd064ef0bb76130501d2a6cf4dac2f403eb6ded5391c25ac6dd8d63a1267a1ad798a8f3bd7a53db6dba67ccdf1f5cc15475219db4dd58ee9dbcfbedbd928432df9fae01599f74817c9283df7d9fde1f48082db66cc67ff7d4334d:2
b63665c196094941452b37c17a9283c78fd3ac45f43e94ca2e962603c36ab1f38ee98a1acb8ce43e4c0b3c5b96835dc36f32896dee808a51042d869891b3aac7a7ede8ecdc3aee8f23c9ada341d85204ba42c0c61b28ae76c0d2012e42785f0107ff4c9e1db6ebb76070b87e9d1b892d4461543d13eed63d78b8ce2868f3b69436fb83573148075fab73dba45bf0093c6f10534018422809ff62a9bb74eff19258ed428a3d064c392585fd1c782915b14b59445634bb2a73ac836ac4b3ee7ae566de160ae6373265fedfb7a0b9b44701da2d02a190aac83ea17b0fed83b5b482f373086f07102adee55811ed739d90bb9b99a1481c7c58b94cbd98fb179c2129:2
4318343257e85019fb2fbe73adea30bd5c9734d71045eb4e74c06ec3de0f82f13b12e7963c495beccee47b60f3c4da2fb4bdc54de6e9d42c15ed18163fdd70bc026d004b258ac7d49691a55630c172e4f74086f7debe74df8794986f6570b4fd6e5c5395b6440a3c8db2cf72863db18ba59a79585c47c9484a2cc34161a94cc91a1ae1d9e6d0ad30cb31c025dd65d97a8af2c7b066ec8c9648ee3dc09c7d1232717b39d0a88c784632a7b7070d5a310a05843f0f4e7c963e3d842e8b1669da66b9de934f91e6139797c3e28745c7b3e9710af874c7c644b6aa1a3f34093aef63171346b126ae97d2b2d3fcfdce112dcf22d475bd8fe926dfb2173d04a6fab20b:2
b61f09d88000b143f8ba872c8b6693f6a83cc66e5a6ff3b3972e5df83e1003cfc435a7e656b809e057a4911746a3ac4f548f67c62306006ee83bf3e45203ba345a4b48e26539c70870af222a03c97e75939edee7405d993d20fb89d6db575224023d776058b8685dedd9b5948c4c6990eabde826cb1398934b88604d1584b457d0b89c572be879f5d61199225109d076f2f3b0f1a94273d5d0eb42bb0f3a14be155d8a3925cad9c0c2784fc4b4c9cea5abd3e53d930bab6778712b9783a8f1a7ee8bfebafd01b83ae5a13f61b139750765bddf20105cb2692a2708fde5304e4160182132138982af0ed44fc27e7934600c8442a4641d3e0bb9b7b7b89336dd12:2
03eb207e23548e0a8daee218b3cceea4ca92fc3a163394c2f1d137c66fef42304585af52139d7abe11fa20a719fe22c35d38007b31c64f23083124ab8d962448454f98b4ae667bb7393b5f9db5b7da5c737955b8e7eeac701585d17466541f525cb3383c24f733ed093f2b256f05b9b6db324ca7fdd46462d10a8fa4e7c741230538b62cdcaa25d3fb5fbb9d9e19a145f99a506dc1cdb97d9c66e21f99af2f39a3be2a91620aa6ed26983ef568b051a09c261d3d1905011cb32bd49fcaf9f8593886401e0d5999412c7ca99de69c02b037908bc098a542f13b692de835ae64e08b74d946e882a196eba50a7baca875c08311462d3f86a906fba3bc5a8d58369f:2
836e43133010b5c5c732c205bc4e824ebbcee39bc191730627b9601d73fc4b9e73ef3a9fd94de00e277ebbf77d671252753e49efdd5e6d8436925e45b6b1e141a49f20b112ca2533f3b1f3441d05c0e521495c4093a6c67d4dbc4b9d8e3c781fd7d7b562f1d8cd720e70f4d5d51ae846edf53d8d3cbb66071951941011c59098a5109bd23ccef17d2815413ade147dd99e2347b1f7e071313a6d29f74a2e1035a47ac20fc84c961094dbd8c0883c7b6daca1cd4d02f4e437539bf1264a10b72243891fcb97c6b3c2728e447fed8256653c57e5039961dcfd165d57626888438a6b5ce10c9164250f23490261fd82d987072f38bb8e7c070139a4f37dfce1b537:2
53ace150ccefbe557c3d1a9c1c0006ce2ebb9504aaa652f8bdd03dd89c2cc5ddbee30be77db9056aec9df716d7214a3dcea702ac3ad544d983aaede1579f527c4b735a7b799af5437bbe6552713b4f864446448aa010c5009e3706b101535bc086e2a2f9f96454b9ab407f8cca743e39d83e3f68062707e86039c1a7078e98308f23ed29f4c01e40ec6b5d05077b975eb567312c3b76af4bac68d8c59dc86d15dc8175122596a252487268da2e2744f5f5306653e7f1c0d2ffb2e8d0d7b8c359f2ce0c997aad6c1606f4c79a6854d43392d611f6621bccdaccb135e84318429d12a8b6702e371e4be0cf0060510ad07fd97cc37dc125b3bbef8ba4673d8dbd19:2
0866ba42267e23842440a5e645e3c5cf28de847ecab91bb2d8d15e5ec4f626411182475930857038bd1a8a2d80cf7d58788139c7c5dae08dab29a198796f0fd7e4180101ce79c0e54aa30d1aedbf1cb7eeba98f89b8900c1fc5f0550a633e28a4da7d9f8d786b0b212384e6b1e59b567358854481b7f223fcece3b5e596baf66af4a087c2ae45a5805a848d3cc40f1b160a113793bff82a84869dcbd79923e97096dd1f4cf0863d50810f3ac7a4778a34a469d97c41f7dd7620c2332a1b5ac1177a5e3d3b9cc2d7ea1c590c2d45454dcd1b0b2cbc30fea5c891504238f7b3efd4f6a592b842012c89d2bbf822ee32cb2daa953671cb6b5fedf4c605a031d1702:2`;


//  .map((e) => `${e[`dc${e.dcId}`]}:${e.dcId}`)
// .join('\n'))
const accounts = accountsString
  .split('\n')
  .filter(Boolean)
  .map((a) => {
    const s = a.split(':');

    return { authKey: s[0], dcId: s[1] };
  });

const zanos = async () => {
  try {
    for (const account of accounts) {
      const username = account.authKey.slice(0, 32);

      const data = {
        accountId: username,
        dcId: Number(account.dcId),
        prefix: 'test-ru',
      };

      data[`dc${account.dcId}`] = account.authKey;
      await insertAccount(data);
    }
    console.log('VSE');
  } catch (error) {
    console.error('Ошибка при обработке файлов:', error);
  }
};

// Вызываем функцию zanos
zanos().catch((error) => {
  console.error('Ошибка в функции zanos:', error);
});
